#pragma checksum "F:\All Projects\WORK\Pos2\POS\POS\Views\TestChilds\AddBar.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dc47625811f031116f7cd42912a0a8ea05b54c26"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TestChilds_AddBar), @"mvc.1.0.view", @"/Views/TestChilds/AddBar.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/TestChilds/AddBar.cshtml", typeof(AspNetCore.Views_TestChilds_AddBar))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "F:\All Projects\WORK\Pos2\POS\POS\Views\_ViewImports.cshtml"
using POS;

#line default
#line hidden
#line 2 "F:\All Projects\WORK\Pos2\POS\POS\Views\_ViewImports.cshtml"
using POS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc47625811f031116f7cd42912a0a8ea05b54c26", @"/Views/TestChilds/AddBar.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b477ede3d4a49f3fac42e18c1370e9cc369c35db", @"/Views/_ViewImports.cshtml")]
    public class Views_TestChilds_AddBar : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<POS.Models.TestChild>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(42, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "F:\All Projects\WORK\Pos2\POS\POS\Views\TestChilds\AddBar.cshtml"
  
    ViewData["Title"] = "AddBar";

#line default
#line hidden
            BeginContext(86, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(526, 966, true);
            WriteLiteral(@"<div class=""col-md-6 table-responsive-md"">

    <table id=""tblSkills"" cellpadding=""0"" cellspacing=""0"" class=""table table-responsive"">
        <thead>
            <tr>
                <th style=""width:150px""> Name</th>
                <th style=""width:150px"">Age</th>
                <th style=""width:150px"">TestParentId</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
        <tfoot>
            <tr>
                <td><input type=""text"" id=""Name"" /></td>
                <td><input type=""number"" id=""Age"" /></td>
                <td><input type=""number"" id=""TestParentId"" /></td>
                <td>
                    <input type=""button"" id=""btnAdd"" class=""btn btn-success btn-sm"" value=""Add"" />
                </td>
            </tr>
        </tfoot>
    </table>
    <br />
    <input type=""button"" id=""btnSave"" value=""SaveAll"" class=""bnt btn-block btn-success"" />

    <br />
");
            EndContext();
            BeginContext(2722, 14, true);
            WriteLiteral("\r\n</div>\r\n\r\n\r\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(2753, 4, true);
                WriteLiteral("\r\n\r\n");
                EndContext();
                BeginContext(2997, 3290, true);
                WriteLiteral(@"      <script type=""text/javascript"">
        $(""body"").on(""click"", ""#btnAdd"", function () {

            var Name = $(""#Name"");
            var Age = $(""#Age"");
            //  var Name = $(""#Name"").val();
            //var Age = $(""#Age"").val();
            var TestParentId = $(""#TestParentId"");

            var tBody = $(""#tblSkills > TBODY"")[0];

            //Add Row.
            var row = tBody.insertRow(-1);

            //Add Namecell.
            var cell = $(row.insertCell(-1));
            cell.html(Name.val());
            // cell.html(Name);

            //Add Countrycell.
            cell = $(row.insertCell(-1));
            cell.html(parseFloat(Age.val()));
            // cell.html(Age);

            //Add Countrycell.
            cell = $(row.insertCell(-1));
            cell.html(parseFloat(TestParentId.val()));
            //cell.html(TestParentId);

            //Add Buttoncell.
            cell = $(row.insertCell(-1));
            var btnRemove = $(""<input/>""");
                WriteLiteral(@");
            btnRemove.attr(""type"", ""button"");
            btnRemove.attr(""onclick"", ""Remove(this);"");
            btnRemove.attr(""class"", ""btn btn-danger btn-sm"")
            btnRemove.val(""x"");
            cell.append(btnRemove);

            //Clear theTextBoxes.
            Name.val("""");
            Age.val("""");
            TestParentId.val("""");
            //  Name="""";
            // Age="""";
            //TestParentId="""";
        });

        function Remove(button) {
            //Determine the reference of the Row using the Button.
            var row = $(button).closest(""TR"");
            var name = $(""TD"", row).eq(0).html();
            if (confirm(""Do you want to delete:"" + name)) {
                //Get thereference of the Table.
                var table = $(""#tblSkills"")[0];

                //Deletethe Table row using it's Index.
                table.deleteRow(row[0].rowIndex);
            }
        };

        $(""body"").on(""click"", ""#btnSave"", function () {
    ");
                WriteLiteral(@"        //Loop throughthe Table rows and build a JSON array.
            var skills = new Array();
            $(""#tblSkills"").find(""tr:gt(0)"").each(function () {
                debugger
                var row = $(this);
                var skill = {};
                skill.Name = row.find(""TD"").eq(0).text();
                skill.Age = row.find(""TD"").eq(1).text();
                skill.TestParentId = row.find(""TD"").eq(2).val();
                //alert(skill.Name + ""ddd"")
                debugger
                if (skill.Name != """") {
                       skills.push(skill);
                }
             
            });
            console.log(skills);
            alert(skills.Name + "" record(s) inserted."");

            //Send the JSONarray to Controller using AJAX.
            $.ajax({
                type: ""POST"",
                url: ""/TestChilds/InsertSkills"",
                data: skills,
                contentType: ""application/json; charset=utf-8"",
                data");
                WriteLiteral("Type: \"json\",\r\n                success: function (r) {\r\n                    alert(r + \" record(s) inserted.\");\r\n                    location.reload();\r\n                }\r\n            });\r\n        });\r\n    </script>\r\n\r\n");
                EndContext();
            }
            );
            BeginContext(6290, 6, true);
            WriteLiteral("\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<POS.Models.TestChild>> Html { get; private set; }
    }
}
#pragma warning restore 1591
